[package]
name = "balatro_tui"
description = "Balatro game clone in CLI"
version = "0.1.0"
license-file = "LICENSE"
readme = "README.md"
authors = ["Utkarsh Bhardwaj (Passeriform) <passeriform.ub@gmail.com>"]
keywords = ["game", "command-line", "cli", "cards"]
categories = ["command-line-utilities", "config", "data-structures"]
repository = "https://github.com/Passeriform/BalatroTUI"
homepage = "https://www.passeriform.com/prod/BalatroTUI"
edition = "2021"
exclude = [
  "HomebrewFormula",
  "/.github/",
  "/ci/",
  "/pkg/brew",
  "/benchsuite/",
  "/scripts/",
]

[badges]
is-it-maintained-issue-resolution = { repository = "https://github.com/Passeriform/BalatroTUI" }
is-it-maintained-open-issues = { repository = "https://github.com/Passeriform/BalatroTUI" }
maintenance = { status = "actively-developed" }

[lints.rust]
warnings = { priority = -1, level = "warn" }
deprecated-safe = { priority = -1, level = "warn" }
future-incompatible = { priority = -1, level = "warn" }
keyword-idents = { priority = -1, level = "warn" }
let-underscore = { priority = -1, level = "warn" }
nonstandard-style = { priority = -1, level = "warn" }
refining-impl-trait = { priority = -1, level = "warn" }
rust-2018-compatibility = { priority = -1, level = "warn" }
rust-2018-idioms = { priority = -1, level = "warn" }
rust-2021-compatibility = { priority = -1, level = "warn" }
rust-2024-compatibility = { priority = -1, level = "warn" }
unused = { priority = -1, level = "warn" }

ambiguous_negative_literals = "warn"
deprecated_in_future = "warn"
ffi_unwind_calls = "warn"
macro_use_extern_crate = "warn"
meta_variable_misuse = "warn"
missing_abi = "warn"
missing_copy_implementations = "warn"
missing_debug_implementations = "warn"
missing_docs = "warn"
non_ascii_idents = "warn"
non_local_definitions = "warn"
redundant_imports = "warn"
redundant_lifetimes = "warn"
single_use_lifetimes = "warn"
trivial_casts = "warn"
trivial_numeric_casts = "warn"
unit_bindings = "warn"
unnameable_types = "warn"
unreachable_pub = "warn"
unsafe_code = "warn"
unstable_features = "allow" # Allowed for nightly
unused_crate_dependencies = "warn"
unused_extern_crates = "allow"  # Required for `human_panic` switched on debug and release build
unused_import_braces = "warn"
unused_lifetimes = "warn"
unused_qualifications = "warn"
unused_results = "warn"
variant_size_differences = "warn"

# For evaluation (refactoring)


[lints.clippy]
all = { priority = -1, level = "warn" }
cargo = { priority = -1, level = "warn" }
complexity = { priority = -1, level = "warn" }
correctness = { priority = -1, level = "warn" }
pedantic = { priority = -1, level = "warn" }
perf = { priority = -1, level = "warn" }
nursery = { priority = -1, level = "warn" }
style = { priority = -1, level = "warn" }
suspicious = { priority = -1, level = "warn" }

absolute_paths = "warn"
alloc_instead_of_core = "warn"
allow_attributes = "warn"
allow_attributes_without_reason = "warn"
arithmetic_side_effects = "warn"
as_underscore = "warn"
assertions_on_result_states = "warn"
big_endian_bytes = "warn"
cfg_not_test = "warn"
clone_on_ref_ptr = "warn"
create_dir = "warn"
dbg_macro = "warn"
decimal_literal_representation = "warn"
default_numeric_fallback = "warn"
default_union_representation = "warn"
deref_by_slicing = "warn"
disallowed_script_idents = "warn"
else_if_without_else = "warn"
empty_drop = "warn"
empty_enum_variants_with_brackets = "warn"
empty_structs_with_brackets = "warn"
error_impl_error = "warn"
exit = "warn"
expect_used = "warn"
field_scoped_visibility_modifiers = "warn"
filetype_is_file = "warn"
float_cmp_const = "warn"
fn_to_numeric_cast_any = "warn"
format_push_string = "warn"
get_unwrap = "warn"
host_endian_bytes = "warn"
if_then_some_else_none = "warn"
impl_trait_in_params = "warn"
implicit_return = "allow"
indexing_slicing = "warn"
infinite_loop = "warn"
inline_asm_x86_att_syntax = "warn"
inline_asm_x86_intel_syntax = "warn"
integer_division = "warn"
integer_division_remainder_used = "warn"
iter_over_hash_type = "warn"
large_include_file = "warn"
let_underscore_must_use = "warn"
let_underscore_untyped = "warn"
little_endian_bytes = "warn"
lossy_float_literal = "warn"
map_err_ignore = "warn"
mem_forget = "warn"
missing_assert_message = "warn"
missing_asserts_for_indexing = "warn"
missing_docs_in_private_items = "warn"
missing_inline_in_public_items = "warn"
missing_trait_methods = "allow"
mixed_read_write_in_expression = "warn"
mod_module_files = "allow"
modulo_arithmetic = "warn"
multiple_crate_versions = "warn"
multiple_inherent_impl = "warn"
multiple_unsafe_ops_per_block = "warn"
mutex_atomic = "warn"
needless_raw_strings = "warn"
non_ascii_literal = "warn"
panic = "warn"
panic_in_result_fn = "warn"
partial_pub_fields = "warn"
pathbuf_init_then_push = "warn"
pattern_type_mismatch = "warn"
print_stderr = "warn"
print_stdout = "warn"
pub_with_shorthand = "warn"
pub_without_shorthand = "warn"
rc_buffer = "warn"
rc_mutex = "warn"
redundant_type_annotations = "warn"
ref_patterns = "warn"
renamed_function_params = "warn"
rest_pat_in_fully_bound_structs = "warn"
same_name_method = "warn"
self_named_module_files = "warn"
semicolon_inside_block = "warn"
separated_literal_suffix = "allow"
shadow_reuse = "warn"
shadow_same = "warn"
shadow_unrelated = "warn"
single_call_fn = "allow"
single_char_lifetime_names = "warn"
str_to_string = "warn"
string_add = "warn"
string_lit_chars_any = "warn"
string_slice = "warn"
string_to_string = "warn"
suspicious_xor_used_as_pow = "warn"
tests_outside_test_module = "warn"
todo = "warn"
try_err = "warn"
undocumented_unsafe_blocks = "warn"
unimplemented = "warn"
unnecessary_safety_comment = "warn"
unnecessary_safety_doc = "warn"
unnecessary_self_imports = "warn"
unneeded_field_pattern = "warn"
unreachable = "warn"
unseparated_literal_suffix = "warn"
unused_result_ok = "warn"
unwrap_in_result = "warn"
use_debug = "warn"
verbose_file_reads = "warn"
wildcard_enum_match_arm = "warn"

# Enable when refactoring
as_conversions = "allow"
min_ident_chars = "allow" # https://github.com/rust-lang/rust-clippy/issues/13396
unwrap_used = "allow"
float_arithmetic = "allow"
cast_precision_loss = "allow"

# Move core to a lib crate and enable these lints
module_name_repetitions = "allow"
missing_errors_doc = "allow"
pub_use = "allow"

# Enable if moving to no_std
std_instead_of_core = "allow"
std_instead_of_alloc = "allow"

[dependencies]
better-panic = "0.3.0"
color-eyre = "0.6.3"
crossterm = { version = "0.28.1", default-features = false, features = ["event-stream"] }
cursorvec = { version = "0.2.0", features = ["strict"] }
futures = "0.3.30"
human-panic = "2.0.1"
itertools = "0.13.0"
libc = "0.2.158"
once_cell = "1.19.0"
rand = "0.8.5"
ratatui = "0.28.1"
tokio = { version = "1.40.0", features = ["full"] }
tokio-util = "0.7.12"
tracing = "0.1.40"
strip-ansi-escapes = "0.2.0"
strum = { version = "0.26.3", features = ["derive"] }
unicode-segmentation = "1.11.0"

[dev-dependencies]
